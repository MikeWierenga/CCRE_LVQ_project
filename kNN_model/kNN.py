from sklearn.neighbors import KNeighborsClassifier
import numpy as np
import scipy.stats as ss
from scipy import integrate
import sys
sys.path.append('/home/fcourse1/Desktop/afstudeerstage/code/CCRE_LVQ_project/Calculating_distance_measures/CCRE_distance')
import cre 
import ccre
class KNN:
    def __init__(self, neighbours, metric):
        self.neighbours = neighbours
        self.metric = metric
        self.x = []
        self.y = []
    
    def create_model(self):
        model = KNeighborsClassifier(n_neighbors=self.neighbours, metric=self.metric)
        return model
    
    def fit_model(self, x, y):
        self.x = x
        self.y = y

    def make_predict(self, model, new_entry):
        return model.predict(new_entry)
    
    def calc_score(self, model, X, y):
        return model.score(X, y)
    
def custom_metric(x, y):
    print(x, y)
    test = np.sqrt(np.sum(x-y)**2)  
    return test


def ccre_distance(x, y):
    print(x[0], y[0])
    # Caluclating CRE
    x= np.array(x).reshape(-1,1)
    y = np.array(y).reshape(-1,1)
    cre_x = cre.CRE(x)
    cre_x_value = cre_x.cre_gaussian_distribution()
    cre_y = cre.CRE(y)
    cre_y_value = cre_y.cre_gaussian_distribution()
    if cre_x_value == cre_y_value:
        return 0
    #calculate expecation value X|Y
    mean_y = np.mean(y)
    sigma_y = np.std(y)

    new_data= np.concatenate((x, y), axis = 1)

    ccre_distance = ccre.CCRE(new_data.T)
    cov_conditional_dist = ccre_distance.cov_conditional_distribution() 
    expect_value_cre_xy = integrate.dblquad(ccre_distance.calculate_expectation_value_xy, -np.inf, np.inf, np.mean(x), np.inf, args=(mean_y, sigma_y, cov_conditional_dist))[0]
    ccre_value = (cre_x_value + (expect_value_cre_xy))/cre_x_value
    if ccre_value <= 0:
        return 1
    else:

        return 1 - ccre_value


X = [[ -8.4882, 0.75611, 3.1039, 0.49939, -4.1003, 4.4417,
        -3.9894, 2.928, 1.7013, -2.1962, 1.5019, -1.7661, -0.047499,
        2.9579, 1.6036, 2.0465, 0.71758, -0.39643, 1.3193, -2.5135,
        -0.53947, 2.4781, -1.3594, 1.2898, 0.9654, -2.2074, 0.7109,
        -1.4481, -0.036562, -0.84051, -0.55588, 1.9279, -2.4215, -1.1376,
        1.7822],
       [ -0.06326, 0.32821, 2.4275, 0.84805, -3.1049,
        -0.68103, -1.3969, 2.4075, 1.9051, 5.7952, -3.2491, 1.4181,
        0.56897, 0.85111, 4.3961, 2.1293, 2.4089, -2.5672, 0.48934,
        1.1492, 0.41888, 4.2533, 1.0934, -2.2484, 2.9026, -2.3489,
        2.7065, -0.33449, -1.2188, 0.129, -0.90582, 1.8785, -3.9565,
        -0.15235, -1.3554],
       [ 3.1951, 3.1258, 7.1414, 0.03987, -2.7743, 3.4102,
        -0.71387, 5.5169, 0.89982, -1.3772, 2.4355, 2.0788, 2.8583,
        -0.25171, 0.57822, 3.7331, 1.9469, -0.77498, 2.5536, -1.5785,
        1.1252, -1.361, -1.4254, 1.6764, 2.8632, -0.74145, 0.29258,
        1.1553, 1.4084, 0.53376, -0.14471, 1.255, -3.7231, 1.5649,
        -0.030957],
       [ -4.5875, 5.1325, 9.0666, 5.567, 1.5104, 2.7714,
        -2.4327, 4.2017, 1.642, 2.4981, 2.9548, 1.2506, 1.6589, -1.7031,
        -0.67306, 4.184, -0.22795, -2.4243, 2.9493, -0.38792, 3.3244,
        2.2199, 1.1026, 0.57346, -0.14366, 1.4344, 0.39578, 0.41051,
        -0.2175, -1.7415, 0.1433, -0.093137, -0.6325, -1.6609, 1.5479],
       [ -1.7623, 0.58042, -0.81796, -1.2853, 0.48209,
        4.4311, 0.39476, 1.3338, -0.36132, 1.4768, 4.802, 2.8195,
        0.21996, 1.7026, 0.38712, 2.1557, -0.71839, 1.7272, 3.6597,
        0.72862, -0.21992, 1.3379, 0.525, -1.6117, 1.2976, -0.78495,
        -0.8495, -1.7145, -0.81771, -0.6856, 0.59103, 0.25271, 0.81587,
        -1.6937, -0.19014],
       [ -11.345, -11.885, 5.4772, 10.268, 3.2189, 0.92705,
        -3.0049, 2.2413, 0.045587, 2.7477, -2.1477, 1.5107, 1.457,
        3.1418, 1.8182, 2.0102, -1.606, 0.86246, -0.38749, -3.6473,
        -1.4453, 0.32372, -0.76303, 0.59394, 0.88892, -1.3865, 0.22765,
        0.034903, -0.51138, -0.77219, -2.1826, 0.62942, -2.3678,
        -0.89407, 0.0060727],
       [ -0.1777, -6.0811, 6.8173, 7.9805, -11.856, 2.5405,
        2.2396, 0.54841, 3.3495, 2.5814, -5.1522, 4.0643, 5.0476, 3.7456,
        2.9131, -2.4353, -0.51757, -0.99437, -10.773, -5.4075, 5.5685,
        -2.035, 4.6803, -0.39021, -5.0808, -0.37672, -1.0542, 4.7447,
        17.977, 0.045675, -4.0648, 2.6323, 2.1084, -2.9798, 0.36452],
       [ 4.6104, 11.154, 3.1589, -3.6246, 2.8817, -0.090462,
        -3.5329, 6.8202, 5.675, 6.7109, 0.71812, 1.9688, 0.65247,
        -2.6552, 3.83, 2.2507, 0.055999, -3.2709, 0.19199, -2.7569,
        2.194, 0.81685, -1.5239, 0.4177, 1.7266, -2.8591, -1.3821,
        -0.53079, 0.85955, 3.0195, 0.74842, 1.1859, -3.9533, -1.7601,
        0.77674],
       [ -7.1448, -3.6034, 5.2613, -2.5518, 4.3756, 0.21569,
        4.9448, 1.5114, 0.63842, 1.0339, 2.4111, 3.0338, 2.7735, 1.9267,
        3.9738, 1.6299, 1.4356, -1.2782, -1.4672, 0.42921, 0.20042,
        0.68755, -0.0963, 1.8031, 0.64976, -1.8924, 2.3993, -0.18394,
        1.3647, 1.8005, 0.85831, -2.297, -2.7922, -3.4303, 2.9623],
       [ 3.7471, 0.061083, -0.40795, 7.72, 7.0565, 7.7373,
        0.34217, 2.1991, -0.39029, -0.81599, 0.59531, 1.5708, -4.5513,
        -1.9427, 2.4212, 0.80478, 1.692, 1.9499, 2.6248, -3.2722,
        -1.2629, 0.50633, -0.011327, -0.15371, -2.5304, -0.95197,
        -2.5443, -0.97579, -0.7669, 3.2862, -2.5909, 0.34577, -0.35515,
        1.3873, -0.9307],
       [ -6.2254, 1.1427, -3.9662, 0.16235, -5.1473,
        -0.90427, 2.0271, 0.35254, 0.83433, 3.1945, 1.5728, 3.977,
        2.1151, 1.8184, 0.94114, 0.088409, -1.0875, -0.44131, 2.2079,
        1.6569, 0.78171, 0.95814, 0.3585, 1.6426, -0.86308, -1.7623,
        1.5341, 0.51378, 1.5506, 1.8038, 0.7589, 1.6539, 0.38135,
        -0.27314, -0.17337],
       [ 2.1996, -2.9715, -1.2376, 3.8531, 2.0733, 3.1635,
        2.0183, -2.6322, 2.9992, -0.72635, 0.21952, -1.1124, 1.3475,
        2.4908, 5.1259, 1.2566, 0.16701, -3.1147, -0.67742, 1.661,
        1.1393, 1.6135, -0.84933, 1.804, 0.56526, -2.2723, -0.3849,
        -2.4033, 1.5336, 0.22382, -1.2099, 2.2501, 1.3533, 0.15726,
        -1.6087],
       [ -14.801, -10.349, 9.2472, 9.5108, -4.8445, 0.6741,
        -1.4067, 1.2852, 1.7232, 3.2002, -1.5721, -1.2879, 1.948, 2.327,
        6.1775, 0.51304, 1.2966, -1.4047, -0.43572, 0.77454, 0.151,
        1.5823, 3.1183, 0.45367, 2.853, -2.674, 0.76245, -1.2077, 2.3684,
        1.0628, 1.1833, 0.83489, -0.55677, 0.31996, -0.69309],
       [ -5.0451, 1.5004, 7.4929, -2.9527, 8.008, 4.7702,
        0.19937, 1.8281, 1.5765, -0.38318, 1.3635, 0.64968, 0.91369,
        -2.3322, 0.55834, -1.3422, 2.2794, 0.2913, -0.24265, -1.4429,
        0.2664, 1.97, -0.12821, -0.51323, -0.64494, -1.855, -0.84492,
        -1.0726, 2.8687, 1.5168, -2.6708, 1.6239, -0.57068, -3.4041,
        5.6687],
       [ 5.1431, 2.8056, 3.4617, 3.7279, 1.7995, 3.611,
        5.9558, 1.7529, -0.75074, -3.0063, -0.66535, 1.9687, 0.27995,
        -0.60914, 1.917, 3.4872, -1.9773, -1.0848, -1.0981, 0.88252,
        1.0928, -1.5688, -0.217, -2.5978, -1.2156, 1.8093, 3.0682, -1.41,
        0.37338, 3.6458, -2.5123, -2.1985, -1.1082, -1.8581, 2.3672],
       [ -3.8429, 1.6544, -17.809, -4.245, 2.4153, 11.214,
        -3.2157, 2.9995, -3.9087, -3.8168, -0.29047, 4.3211, -1.1097,
        -2.5453, -3.0947, 0.041333, -3.3252, -2.0427, 2.4954, -2.4073,
        4.7122, 1.7145, -0.34128, -1.6179, -6.7939, 3.6464, -0.32458,
        -1.5749, -1.5732, -1.6025, 1.3837, -0.89723, -0.052695, -1.2938,
        13.737],
       [ -2.1853, 2.3583, -9.5767, -3.8716, 4.1667, 5.0953,
        4.4114, 0.36491, 1.8639, 1.9389, 2.1743, 3.203, 2.3246, -0.24306,
        1.1767, 0.39089, 2.2733, -2.5162, 1.2108, -0.51535, 0.93135,
        2.5294, -0.016183, -3.2415, -3.5845, 0.25795, -0.36371, 0.68722,
        -0.057812, 0.7194, -0.86189, -0.086305, -0.67032, -0.57493,
        4.6669],
       [ 2.5647, 4.7312, -1.434, 0.56614, -2.3221, 3.1593,
        2.791, -1.3711, 2.7528, 2.4849, 1.1922, -0.48605, -1.2853,
        -0.2336, 1.0327, 0.57857, -0.098168, 0.50681, 1.6787, -1.4275,
        1.9943, 1.1798, -0.14524, -1.0348, -0.48278, 0.75415, -2.431,
        -2.5247, -1.1562, 1.0405, -2.9387, 0.1343, -0.34124, 0.30236,
        0.6418],
       [ -6.0733, 1.6834, 0.65985, -2.3784, 1.4996, 0.81256,
        -2.0926, 4.813, -2.6258, 0.26515, 2.2355, 2.2274, -1.395,
        -1.5099, 0.99677, -0.2468, 5.486, -1.8706, 1.234, -1.2128,
        -0.23464, 1.1816, 0.77823, 0.38707, -1.036, 0.62643, -0.44216,
        0.50145, 0.15151, -0.41381, -1.2501, 1.8059, 0.66075, -0.74716,
        4.1104],
       [ -18.109, 3.5617, 2.4711, 6.4358, -3.1372, 4.9521,
        -2.3195, -0.42907, 0.8224, 1.8296, -2.9632, -0.15551, -3.4141,
        0.18573, -3.5309, 0.80358, -1.8024, 2.8588, -0.6705, 0.95308,
        1.2296, 1.9864, -0.54689, -2.4393, 1.7108, -1.2848, -0.95516,
        -0.90707, 1.1026, -0.48627, -1.0097, -0.39414, 1.7375, -0.38507,
        2.0947]]

y = [0, 0, 0, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]

knn_test = KNeighborsClassifier(n_neighbors=1, metric=ccre_distance)
knn_test.fit(X, y)
print(knn_test.predict([[ -18.109, 3.5617, 2.4711, 6.4358, -3.1372, 4.9521,
        -2.3195, -0.42907, 0.8224, 1.8296, -2.9632, -0.15551, -3.4141,
        0.18573, -3.5309, 0.80358, -1.8024, 2.8588, -0.6705, 0.95308,
        1.2296, 1.9864, -0.54689, -2.4393, 1.7108, -1.2848, -0.95516,
        -0.90707, 1.1026, -0.48627, -1.0097, -0.39414, 1.7375, -0.38507,
        2.0947]]))
# print(knn_test.predict_proba([[0.9,1, 1]]))

